Here are the key data models for your Firebase Firestore collections:

1. Users Collection
{
  id: "auto-generated-firebase-id",
  email: "user@example.com",
  name: "Full Name",
  role: "admin" | "parent" | "staff",
  phone: "123-456-7890",
  createdAt: timestamp,
  lastLogin: timestamp
}

2. Children Collection
{
  id: "auto-generated-firebase-id",
  parentId: "reference-to-parent-user-id",
  name: "Child Name",
  dateOfBirth: timestamp,
  specialNeeds: "Description of special needs",
  medicalInfo: "Medical information",
  photo: "url-to-photo" (optional),
  participatedEvents: ["event-id-1", "event-id-2"]
}

3. Events Collection
{
  id: "auto-generated-firebase-id",
  name: "Event Name",
  date: timestamp,
  location: "Event Location",
  description: "Event Description",
  maxParticipants: 20,
  participants: [
    {
      childId: "child-id-1",
      registeredAt: timestamp,
      vehicleId: "vehicle-id-1",
      notes: "Special notes"
    }
  ],
  instructors: ["instructor-id-1", "instructor-id-2"],
  photos: ["photo-url-1", "photo-url-2"],
  status: "upcoming" | "completed" | "cancelled"
}

4. Vehicles Collection
{
  id: "auto-generated-firebase-id",
  name: "Vehicle Name",
  type: "Vehicle Type",
  description: "Vehicle Description",
  status: "available" | "in-use" | "maintenance",
  lastMaintenanceDate: timestamp,
  photos: ["photo-url-1", "photo-url-2"]
}

5. Instructors Collection
{
  id: "auto-generated-firebase-id",
  name: "Instructor Name",
  email: "instructor@example.com",
  phone: "123-456-7890",
  specialties: ["specialty-1", "specialty-2"],
  availability: {
    monday: true,
    tuesday: false,
    // ... other days
  },
  assignedEvents: ["event-id-1", "event-id-2"]
}

6. Gallery Collection
{
  id: "auto-generated-firebase-id",
  eventId: "reference-to-event-id",
  photos: [
    {
      url: "photo-url-1",
      caption: "Photo Caption",
      uploadedAt: timestamp,
      tags: ["tag-1", "tag-2"]
    }
  ]
}
*/

// Example of creating a new user in Firebase
import { createUserWithEmailAndPassword } from 'firebase/auth';
import { doc, setDoc, serverTimestamp } from 'firebase/firestore';
import { auth, db } from '../services/firebase/firebase';

export const createNewUser = async (email, password, userData) => {
  try {
    // Create user in Firebase Auth
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    const user = userCredential.user;

    // Add user data to Firestore
    await setDoc(doc(db, 'users', user.uid), {
      email,
      ...userData,
      role: userData.role || 'parent', // Default role
      createdAt: serverTimestamp(),
      lastLogin: serverTimestamp()
    });

    return user;
  } catch (error) {
    console.error('Error creating user:', error);
    throw error;
  }
};

// Example of registering a child to an event
import { doc, updateDoc, arrayUnion, getDoc } from 'firebase/firestore';

export const registerChildForEvent = async (eventId, childData) => {
  try {
    const eventRef = doc(db, 'events', eventId);

    // Check if event exists and has space
    const eventDoc = await getDoc(eventRef);
    if (!eventDoc.exists()) {
      throw new Error('Event not found');
    }

    const eventData = eventDoc.data();
    if (eventData.participants.length >= eventData.maxParticipants) {
      throw new Error('Event is full');
    }

    // Add child to event participants
    await updateDoc(eventRef, {
      participants: arrayUnion({
        childId: childData.childId,
        registeredAt: serverTimestamp(),
        vehicleId: childData.vehicleId || null,
        notes: childData.notes || ''
      })
    });

    // Update child's participated events
    const childRef = doc(db, 'children', childData.childId);
    await updateDoc(childRef, {
      participatedEvents: arrayUnion(eventId)
    });

    return true;
  } catch (error) {
    console.error('Error registering child for event:', error);
    throw error;
  }
};